What happens when you initialize a repository? Why do you need to do it?

	Git creates a new repository directory, .git, in the directory you created
	the repository in. This enables you to start committing and working with
	the repository by providing the framework repository structure, config,
	etc.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	It enables you to prepare files that you've worked on and want to include 
	as part of a commit without actually committing them immediately. You're
	less likely to forget to include them in the commit if you can stage them
	immediately. Looking simply at changed files may not tell you what you want
	to add, since there may be some changed files that aren't ready to be committed
	yet or aren't part of the logical change you're currently implementing.

How can you use the staging area to make sure you have one commit per logical change?

	By only adding the files that comprise parts of the logical change you can insure
	that when you commit you've only committed the single logical change. If you're
	unsure at any time, you can check 'git diff --staged' to see if there's something
	staged that doesn't correspond to that logical change and remove it from the 
	staging area with 'git reset' before committing.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches allow individuals or especially teams to work on multiple different features
	at the same time, possibly even conflicting designs, without impacting the main line.
	The main line can then be reserved for bug fixes rather than functionality additions,
	and branched features can be merged back in when they are fully functional.

How do the diagrams help you visualize the branch structure?

	The diagrams show the relationships between each individual commit in the commit chain,
	child to parent, as well as displaying when branches were forked from the master branch
	so that you can see what features of the current master they won't be working with.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

    The changes made in both branch are combined, minus any conflicts that were resolved in favor of 
    the other branch, onto the currently checked out branch. We represent it as two commits coming together
    because each of the branches have separate commit histories, so while git log tries to represent
    them linearly they don't follow that sort of progression.